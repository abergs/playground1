{"version":3,"file":"orbs.8805d5b7.js","sources":["../../orbs/orbs.js"],"sourcesContent":["import * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { LayerMaterial, Base, Depth, Fresnel, Noise } from \"lamina/vanilla\";\r\nimport { Vector3 } from \"three\";\r\nimport { CircleGeometry } from \"three\";\r\nconst sizes = {\r\n  width: window.innerWidth,\r\n  height: window.innerHeight\r\n}\r\n\r\nconst scene = new THREE.Scene();\r\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\r\ncamera.position.x = 0\r\ncamera.position.y = 0\r\ncamera.position.z = 3\r\n//scene.background = new THREE.Color('#090f37');\r\nscene.add(camera);\r\nconst canvas = document.getElementById(\"canvas\");\r\n\r\nconst renderer = new THREE.WebGLRenderer({\r\n  canvas: canvas,\r\n  antialias: true,\r\n  alpha: false\r\n})\r\n\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n//renderer.setClearColor(\"#ebebeb\");\r\n\r\n// const controls = new OrbitControls(camera, renderer.domElement);\r\n// controls.enableDamping = true;\r\n// controls.addEventListener( 'change', ()=>{ \r\n//   console.log(1);\r\n//   //renderer.render(scene, camera)\r\n// } );\r\n\r\n\r\n\r\nconst randomProps = new Array(1).fill(0).map(() => {\r\n  return {\r\n    position: [\r\n      THREE.MathUtils.randFloat(-1, 1), //\r\n      THREE.MathUtils.randFloat(-1, 1),\r\n      THREE.MathUtils.randFloat(-20, -1),\r\n    ],\r\n    rotation: [\r\n      THREE.MathUtils.randFloat(-10, 10), //\r\n      THREE.MathUtils.randFloat(-10, 10),\r\n      THREE.MathUtils.randFloat(-20, 10),\r\n    ],\r\n    scale: THREE.MathUtils.randFloat(0.05, 1),\r\n  };\r\n});\r\n\r\n\r\nconst colorOptions=  {\r\n  green: {\r\n    d1: [\"#00ff00\",\"#0F1C4D\"],\r\n    d2: [\"#00ff00\",\"#0f4d3c\"],\r\n    f: \"green\",\r\n    blur: \"green\"\r\n  },\r\n\r\n  red: {\r\n    d1: [\"#39d1ff\",\"#500202\"],\r\n    d2: [\"#39d1ff\",\"black\"],\r\n    f: \"red\",\r\n    blur: \"#39d1ff\"\r\n  },\r\n\r\n  orange: {\r\n    d1: [\"#ff0000\",\"#0F1C4D\"],\r\n    d2: [\"#ff0000\",\"#0f4d3c\"],\r\n    f: \"orange\",\r\n    blur: \"orange\"\r\n  }\r\n}\r\n\r\nconst urlparams= new Proxy(new URLSearchParams(window.location.search), {\r\n\tget: (searchParams, prop) => searchParams.get(prop),\r\n});\r\n\r\n\r\n\r\nlet colors = colorOptions[urlparams.color || \"orange\"];\r\n\r\nlet items = [];\r\nrandomProps.forEach((prop) => {\r\n  const geometry = new THREE.SphereBufferGeometry(1, 128, 64);\r\n  const material = new LayerMaterial({\r\n    layers: [\r\n      new Base({\r\n        color: \"#603295\",\r\n      }),\r\n      new Depth({\r\n        colorA: colors.d1[0],\r\n        colorB: colors.d1[1],\r\n        alpha: 0.5,\r\n        mode: \"normal\",\r\n        near: 0,\r\n        far: 2.2,\r\n        origin: new Vector3(1, 1, 1),\r\n      }),\r\n      new Depth({\r\n        colorA: colors.d2[0],\r\n        colorB: colors.d2[1],\r\n        alpha: 0.5,\r\n        mode: \"add\",\r\n        near: 3,\r\n        far: 2,\r\n        origin: new Vector3(1, 1, 1),\r\n      }),\r\n      new Fresnel({\r\n        color: colors.f,\r\n        alpha: 1,\r\n        mode: \"add\",\r\n        power: 2,\r\n        intensity: 1.5,\r\n        bias: 0.05,\r\n      }),\r\n      \r\n   \r\n      new Noise({\r\n        mapping: \"local\",\r\n        colorA: \"#ffffff\",\r\n        colorB: \"#000000\",\r\n        type: \"simplex\",\r\n        mode: \"subtract\",\r\n        scale: 100.0,\r\n        alpha: 0.1,\r\n      }),\r\n    ],\r\n  });\r\n\r\n  const mesh = new THREE.Mesh(geometry, material);\r\n  \r\n  // circle\r\n  const circlego = new THREE.CircleBufferGeometry(4,16);\r\n  const cmat = new LayerMaterial({\r\n    depthWrite: false,\r\n    side: THREE.FrontSide,\r\n    blending: THREE.AdditiveBlending,\r\n    layers: [\r\n      new Depth({\r\n        colorA: colors.blur,\r\n        colorB: \"black\",\r\n        alpha: 1.0,\r\n        mode:\"normal\",\r\n        near: -2,\r\n        far:1.8,\r\n        origin: new Vector3(0,0,0)\r\n      })\r\n    ]\r\n  });\r\n\r\n  const cmesh = new THREE.Mesh(circlego, cmat);\r\n  items.push(cmesh)\r\n  items.push(mesh)\r\n\r\n\r\n\r\n  // const group = new THREE.Group();\r\n  // group.add(mesh);\r\n  // group.position.fromArray(prop.position);\r\n  // console.log(prop.position);\r\n  // group.position.z = -3.0;\r\n  // group.rotation.fromArray(prop.rotation);\r\n  // group.scale.setScalar(prop.scale);\r\n\r\n  //scene.add(group);\r\n});\r\n\r\n\r\n// add background\r\nconst box = new THREE.BoxGeometry(1, 1, 1);\r\nconst boxmaterial = new LayerMaterial({\r\n  side: THREE.BackSide,\r\n    layers: [\r\n      new Depth({\r\n        colorA: \"#090f37\",\r\n        colorB: '#060A26',\r\n        //colorB: \"#060A26\",\r\n        alpha: 1,\r\n        mode: \"normal\",\r\n        near: 100,\r\n        far: 200,\r\n        origin: new Vector3(100, 100, -100),\r\n      }),\r\n   \r\n      new Noise({\r\n        colorA: \"#ffffff\",\r\n        colorB: \"#000000\",\r\n        mapping: \"world\",\r\n        mode: \"multiply\",\r\n        scale: 1.0,\r\n        type: \"white\",\r\n      }),\r\n    ],\r\n  });\r\n\r\n  const bgmesh = new THREE.Mesh(box, boxmaterial);\r\n  bgmesh.scale.set(100, 100, 100);\r\n  const scene2 = new THREE.Scene();\r\n\r\n  const camera2 = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\r\ncamera2.position.x = 0\r\ncamera2.position.y = 0\r\ncamera2.position.z = 3\r\n  scene.add(bgmesh);\r\n  //scene2.add(camera);\r\n\r\nrenderer.render(scene2, camera);\r\n\r\nitems.forEach((item, i) => {\r\n  scene.add(item);\r\n});\r\n\r\nscene.background = null;\r\n\r\nvar clock = new THREE.Clock();\r\nconst speed = 1;\r\nconst floatIntensity = 1;\r\nconst rotationIntensity = 1;\r\nfunction animate() {\r\n  requestAnimationFrame(animate);\r\n\r\n  const t = clock.getElapsedTime();\r\n  items.forEach((item, i) => {\r\n    item.rotation.x = (Math.cos((t / 4) * speed) / 8) * rotationIntensity\r\n    item.rotation.y = (Math.sin((t / 4) * speed) / 8) * rotationIntensity\r\n    item.rotation.z = (Math.sin((t / 4) * speed) / 20) * rotationIntensity\r\n    item.position.y = (Math.sin((t / 4) * speed) / 10) * floatIntensity;\r\n  });\r\n\r\n  // controls.update();\r\n\r\n  // renderer.render(scene2, camera2);\r\n  renderer.render(scene, camera);\r\n\r\n\r\n}\r\n\r\nfunction handlescroll(event){\r\n  camera.position.z = Math.max(2.4, Math.min(camera.position.z + event.deltaY/200, 10));\r\n}\r\ndocument.addEventListener( 'mousewheel', handlescroll, false );\r\n\r\n\r\n\r\nanimate();\r\n"],"names":["THREE.Scene","THREE.PerspectiveCamera","THREE.WebGLRenderer","THREE.MathUtils","THREE.SphereBufferGeometry","THREE.Mesh","THREE.CircleBufferGeometry","THREE.FrontSide","THREE.AdditiveBlending","THREE.BoxGeometry","THREE.BackSide","THREE.Clock"],"mappings":"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"}