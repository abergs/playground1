{"version":3,"file":"wavy.b2f73643.js","sources":["../../wavy/vertexShader.vert","../../wavy/fragmentShader.frag","../../wavy/waves.js"],"sourcesContent":["export const vertexShader = `\r\nuniform float time;\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\nvarying float vColorRandoms;\r\n\r\nattribute float randoms;\r\nattribute float colorRandoms;\r\nvoid main()\t{\r\n    vUv= uv;\r\n    vColorRandoms= colorRandoms;\r\n    vec4 mvPosition = modelViewMatrix* vec4(position, 1.);\r\n    gl_PointSize = 2. +(500. * randoms ) * (1. / -mvPosition.z);\r\n    gl_Position = projectionMatrix * mvPosition;// vec4( position, 1.0 );\r\n}\r\n`;","export const fragmentShader = `\r\nuniform float time;\r\nuniform vec2 resolution;\r\n\r\nuniform vec3 uColor1;\r\nuniform vec3 uColor2;\r\nuniform vec3 uColor3;\r\n\r\nvarying float vColorRandoms;\r\n\r\nvoid main()\t{\r\n\r\n    float disc = smoothstep(0.5,-0.3,length(gl_PointCoord - vec2(0.5)));\r\n\r\n    vec3 finalColor = uColor1;\r\n    if(vColorRandoms > .33) {\r\n        finalColor = uColor2;\r\n    } \r\n    if(vColorRandoms > .66) {\r\n        finalColor = uColor3;\r\n    }\r\n    float x = mod(time + gl_FragCoord.x, 20.) < 10. ? 1. : 0.;\r\n    float y = mod(time + gl_FragCoord.y, 20.) < 10. ? 1. : 0.;\r\n    gl_FragColor = vec4(finalColor, 1.0);\r\n    gl_FragColor = vec4(finalColor, disc);\r\n}\r\n\r\n`;\r\n\r\nexport default fragmentShader;","\r\nimport * as THREE from \"three\";\r\nimport {SimplexNoise} from \"simplex-noise\";\r\nimport * as chroma from \"chroma-js\";\r\nimport { Mesh, ShaderMaterial } from \"three\";\r\nimport {vertexShader} from \"./vertexShader.vert\";\r\nimport {fragmentShader} from \"./fragmentShader.frag\";\r\nimport * as TWEEN from \"@tweenjs/tween.js\";\r\n\r\n\r\nimport {\r\n  PostProcessRenderer,\r\n  ChromaticAberrationShaderPass,\r\n} from \"threejs-postprocess\";\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\r\nApp({ el: 'background' });\r\n\r\n\r\nexport const x = \"\";\r\n\r\nconsole.log(chroma);\r\n\r\nfunction App(conf) {\r\n  conf = {\r\n    fov: 75,\r\n    cameraZ: 75,\r\n    xyCoef: 50,\r\n    zCoef: 10,\r\n    lightIntensity: 0.7,\r\n    ambientColor: 0x000000,\r\n    light1Color: 0x050A30,\r\n    light2Color: 0x000C66,\r\n    light3Color: 0x0000FF,\r\n    light4Color: 0x7EC8E3,\r\n    ...conf\r\n  };\r\n\r\n  let renderer, scene, camera, cameraCtrl;\r\n  let width, height, cx, cy, wWidth, wHeight;\r\n  const TMath = THREE.Math;\r\n  let geometry, plane, material;\r\n\r\n\r\n  const simplex = new SimplexNoise();\r\n\r\n  const mouse = new THREE.Vector2();\r\n  const mousePlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\r\n  const mousePosition = new THREE.Vector3();\r\n  const raycaster = new THREE.Raycaster();\r\n\r\n  const noiseInput = document.getElementById('noiseInput');\r\n  const heightInput = document.getElementById('heightInput');\r\n\r\n  let postProcessRender;\r\n\r\n  init();\r\n\r\n  function init() {\r\n    renderer = new THREE.WebGLRenderer({ canvas: document.getElementById(conf.el), antialias: true, alpha: true });\r\n    camera = new THREE.PerspectiveCamera(conf.fov);\r\n    camera.position.z = conf.cameraZ;\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    updateSize();\r\n    window.addEventListener('resize', updateSize, false);\r\n\r\n    // document.addEventListener('mousemove', e => {\r\n    //   const v = new THREE.Vector3();\r\n    //   camera.getWorldDirection(v);\r\n    //   v.normalize();\r\n    //   mousePlane.normal = v;\r\n    //   mouse.x = (e.clientX / width) * 2 - 1;\r\n    //   mouse.y = - (e.clientY / height) * 2 + 1;\r\n    //   raycaster.setFromCamera(mouse, camera);\r\n    //   raycaster.ray.intersectPlane(mousePlane, mousePosition);\r\n    // });\r\n\r\n    //initScene();\r\n    initScene();\r\n    initPost();\r\n    initGui();\r\n    animate();\r\n\r\n    //initTween();\r\n  }\r\n\r\n  function initTween() {\r\n    tween = new TWEEN.Tween(noiseInput.value)\r\n    .to(100, 2000)\r\n    .delay(1000)\r\n    .easing(TWEEN.Easing.Elastic.InOut);\r\n  }\r\n\r\n\r\n\r\n\r\n  function initPost() {\r\n    postProcessRender = new PostProcessRenderer(scene, camera, renderer); \r\n    const pass = new ChromaticAberrationShaderPass();\r\n    const bloom = new UnrealBloomPass();\r\n    pass.rate = .9;\r\n    \r\n    //bloom.radius \r\n    postProcessRender.addComposer([pass,bloom]);\r\n  }\r\n\r\n  function initGui() {\r\n    noiseInput.value = 101 - conf.xyCoef;\r\n    heightInput.value = conf.zCoef * 100 / 25;\r\n\r\n    noiseInput.addEventListener('input', e => {\r\n      conf.xyCoef = 101 - noiseInput.value;\r\n    });\r\n    heightInput.addEventListener('input', e => {\r\n      conf.zCoef = heightInput.value * 25 / 100;\r\n    });\r\n\r\n  }\r\n\r\n  // function initScene2() {\r\n  //   scene = new THREE.Scene();\r\n  //   initLights();\r\n\r\n  //   let mat = new THREE.MeshLambertMaterial({ color: 0xffffff, opacity:0.9, side: THREE.DoubleSide});\r\n  //   let particles = new Three\r\n    \r\n  //   //mat = new THREE.MeshPhongMaterial({ color: 0xffffff });\r\n  //   // let mat = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.5, metalness: 0.8 });\r\n  //   let geo = new THREE.PlaneBufferGeometry(wWidth, wHeight, wWidth / 2, wHeight / 2);\r\n  //   plane = new THREE.Mesh(geo, shaderMaterial);\r\n  //   scene.add(plane);\r\n\r\n  //   plane.rotation.x = -Math.PI / 2 - 0.2;\r\n  //   plane.position.y = -62;\r\n  //   camera.position.z = 160;\r\n  // }\r\n\r\n  function initScene() {\r\n    scene = new THREE.Scene();\r\n    initLights();\r\n\r\n    geometry = new THREE.PlaneGeometry(wWidth,wHeight,100,100);\r\n    //material = new THREE.MeshBasicMaterial({color: 0x000000});\r\n    //material = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.5, metalness: 0.8 });\r\n    //material = new THREE.PointsMaterial({ color: 0xff0000 });\r\n    material = new ShaderMaterial({\r\n      uniforms: {\r\n        time: { value: 0},\r\n        resolution: { value : new THREE.Vector4()},\r\n        uColor1: { value: new THREE.Color(0x612574)},\r\n        uColor2: { value: new THREE.Color(0x293583)},\r\n        uColor3: { value: new THREE.Color(0x1954ec)}\r\n      },\r\n      transparent: true,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader,\r\n      blending: THREE.AdditiveBlending\r\n    })\r\n    //material = mat;\r\n    plane = new THREE.Points(geometry, material);\r\n\r\n\r\n    var number = geometry.index.array.length;\r\n    let randoms = new Float32Array(number);\r\n    let colorRandoms = new Float32Array(number);\r\n\r\n    for (let i = 0; i < number; i++) {\r\n      randoms.set([Math.random()],i);\r\n      colorRandoms.set([Math.random()],i);\r\n      \r\n    }\r\n\r\n    geometry.setAttribute(\"randoms\", new THREE.BufferAttribute(randoms,1));\r\n    geometry.setAttribute(\"colorRandoms\", new THREE.BufferAttribute(colorRandoms,1));\r\n    \r\n    //mat = new THREE.MeshPhongMaterial({ color: 0xffffff });\r\n    // let mat = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.5, metalness: 0.8 });\r\n    // let geo = new THREE.PlaneBufferGeometry(wWidth, wHeight, wWidth / 2, wHeight / 2);\r\n    // plane = new THREE.Mesh(geo, shaderMaterial);\r\n    scene.add(plane);\r\n\r\n    //plane.rotation.x = -Math.PI / 2 - 0.2;\r\n    //plane.position.y = -62;\r\n    camera.position.z = 80;\r\n  }\r\n\r\n  var light1, light2, light3, light4, gArray;\r\n\r\n  function initLights() {\r\n    const r = 30;\r\n    const y = 10;\r\n    const lightDistance = 500;\r\n\r\n    // light = new THREE.AmbientLight(conf.ambientColor);\r\n    // scene.add(light);\r\n\r\n    light1 = new THREE.PointLight(conf.light1Color, conf.lightIntensity, lightDistance);\r\n    light1.position.set(0, y, r);\r\n    //scene.add(light1,new THREE.PointLightHelper( light1));\r\n    light2 = new THREE.PointLight(conf.light2Color, conf.lightIntensity, lightDistance);\r\n    light2.position.set(0, -y, -r);\r\n    //scene.add(light2, new THREE.PointLightHelper( light2));\r\n    light3 = new THREE.PointLight(conf.light3Color, conf.lightIntensity, lightDistance);\r\n    light3.position.set(r, y, 0);\r\n    //scene.add(light3, new THREE.PointLightHelper( light3));\r\n    light4 = new THREE.PointLight(conf.light4Color, conf.lightIntensity, lightDistance);\r\n    light4.position.set(-r, y, 0);\r\n    //scene.add(light4, new THREE.PointLightHelper( light4));\r\n  }\r\n\r\n  function animate() {\r\n    requestAnimationFrame(animate);\r\n\r\n    animatePlane();\r\n    animateLights();\r\n\r\n\r\n    renderer.render(scene, camera);\r\n    postProcessRender.render();\r\n\r\n  };\r\n\r\n  function animatePlane() {\r\n    gArray = plane.geometry.attributes.position.array;\r\n    //conf.xyCoef = 100;\r\n    const time = Date.now() * 0.0002;\r\n    conf.xyCoef = Math.abs(Math.sin(time * 0.8) * 100) +10;\r\n    \r\n    // console.log(conf.xyCoef);\r\n    for (let i = 0; i < gArray.length; i += 3) {\r\n      gArray[i + 2] = simplex.noise4D(gArray[i] / conf.xyCoef, gArray[i + 1] / conf.xyCoef, time, mouse.x + mouse.y) * conf.zCoef;\r\n    }\r\n    plane.geometry.attributes.position.needsUpdate = true;\r\n    // plane.geometry.computeBoundingSphere();\r\n  }\r\n\r\n  function animateLights() {\r\n    const time = Date.now() * 0.001;\r\n    const d = 40;\r\n    light1.position.x = Math.sin(time * 0.1) * d;\r\n    light1.position.z = Math.cos(time * 0.2) * d;\r\n    light2.position.x = Math.cos(time * 0.3) * d;\r\n    light2.position.z = Math.sin(time * 0.4) * d;\r\n    light3.position.x = Math.sin(time * 0.5) * d;\r\n    light3.position.z = Math.sin(time * 0.6) * d;\r\n    light4.position.x = Math.sin(time * 0.7) * d;\r\n    light4.position.z = Math.cos(time * 0.8) * d;\r\n  }\r\n\r\n  function updateLightsColors() {\r\n    conf.light1Color = chroma.random().hex();\r\n    conf.light2Color = chroma.random().hex();\r\n    conf.light3Color = chroma.random().hex();\r\n    conf.light4Color = chroma.random().hex();\r\n    light1.color = new THREE.Color(conf.light1Color);\r\n    light2.color = new THREE.Color(conf.light2Color);\r\n    light3.color = new THREE.Color(conf.light3Color);\r\n    light4.color = new THREE.Color(conf.light4Color);\r\n    // console.log(conf);\r\n  }\r\n\r\n  function updateSize() {\r\n    width = window.innerWidth; cx = width / 2;\r\n    height = window.innerHeight; cy = height / 2;\r\n    if (renderer && camera) {\r\n      renderer.setSize(width, height);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      const wsize = getRendererSize();\r\n      wWidth = wsize[0];\r\n      wHeight = wsize[1];\r\n    }\r\n  }\r\n\r\n  function getRendererSize() {\r\n    const cam = new THREE.PerspectiveCamera(camera.fov, camera.aspect);\r\n    const vFOV = cam.fov * Math.PI / 180;\r\n    const height = 2 * Math.tan(vFOV / 2) * Math.abs(conf.cameraZ);\r\n    const width = height * cam.aspect;\r\n    return [width, height];\r\n  }\r\n}\r\n"],"names":["THREE.Vector2","THREE.Plane","THREE.Vector3","THREE.Raycaster","THREE.WebGLRenderer","THREE.PerspectiveCamera","THREE.Scene","THREE.PlaneGeometry","THREE.Vector4","THREE.Color","THREE.AdditiveBlending","THREE.Points","THREE.BufferAttribute","THREE.PointLight"],"mappings":"2jBAAO,KAAM,IAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECAf,GAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECe9B,GAAI,CAAE,GAAI,eAKV,QAAQ,IAAI,GAEZ,YAAa,EAAM,CACjB,EAAO,GACL,IAAK,GACL,QAAS,GACT,OAAQ,GACR,MAAO,GACP,eAAgB,GAChB,aAAc,EACd,YAAa,OACb,YAAa,KACb,YAAa,IACb,YAAa,SACV,GAGF,GAAC,GAAU,EAAO,EACjB,EAAO,EAAgB,EAAQ,EAE/B,EAAU,EAAO,EAGrB,KAAM,GAAU,GAAI,GAEd,EAAQ,GAAIA,IACC,GAAIC,GAAY,GAAIC,GAAc,EAAG,EAAG,GAAI,GACzC,GAAIA,GACR,GAAIC,GAEtB,KAAM,GAAa,SAAS,eAAe,cACrC,EAAc,SAAS,eAAe,eAE5C,GAAI,GAEJ,IAEA,YAAgB,CACd,EAAW,GAAIC,GAAoB,CAAE,OAAQ,SAAS,eAAe,EAAK,IAAK,UAAW,GAAM,MAAO,KACvG,EAAS,GAAIC,GAAwB,EAAK,KAC1C,EAAO,SAAS,EAAI,EAAK,QACzB,EAAS,cAAc,OAAO,kBAE9B,IACA,OAAO,iBAAiB,SAAU,EAAY,IAc9C,IACA,IACA,IACA,IAeF,YAAoB,CAClB,EAAoB,GAAI,IAAoB,EAAO,EAAQ,GAC3D,KAAM,GAAO,GAAI,GACX,EAAQ,GAAI,GAClB,EAAK,KAAO,GAGZ,EAAkB,YAAY,CAAC,EAAK,IAGtC,YAAmB,CACjB,EAAW,MAAQ,IAAM,EAAK,OAC9B,EAAY,MAAQ,EAAK,MAAQ,IAAM,GAEvC,EAAW,iBAAiB,QAAS,GAAK,CACxC,EAAK,OAAS,IAAM,EAAW,QAEjC,EAAY,iBAAiB,QAAS,GAAK,CACzC,EAAK,MAAQ,EAAY,MAAQ,GAAK,MAuB1C,YAAqB,CACnB,EAAQ,GAAIC,GACZ,IAEA,EAAW,GAAIC,IAAoB,EAAO,EAAQ,IAAI,KAItD,EAAW,GAAI,IAAe,CAC5B,SAAU,CACR,KAAM,CAAE,MAAO,GACf,WAAY,CAAE,MAAQ,GAAIC,KAC1B,QAAS,CAAE,MAAO,GAAIC,GAAY,UAClC,QAAS,CAAE,MAAO,GAAIA,GAAY,UAClC,QAAS,CAAE,MAAO,GAAIA,GAAY,WAEpC,YAAa,GACb,UAAW,GACX,WAAY,GACZ,aAAc,GACd,eAAgB,GAChB,SAAUC,KAGZ,EAAQ,GAAIC,IAAa,EAAU,GAGnC,GAAI,GAAS,EAAS,MAAM,MAAM,OAClC,GAAI,GAAU,GAAI,cAAa,GAC3B,EAAe,GAAI,cAAa,GAEpC,OAAS,GAAI,EAAG,EAAI,EAAQ,IAC1B,EAAQ,IAAI,CAAC,KAAK,UAAU,GAC5B,EAAa,IAAI,CAAC,KAAK,UAAU,GAInC,EAAS,aAAa,UAAW,GAAIC,GAAsB,EAAQ,IACnE,EAAS,aAAa,eAAgB,GAAIA,GAAsB,EAAa,IAM7E,EAAM,IAAI,GAIV,EAAO,SAAS,EAAI,GAGtB,GAAI,GAAQ,EAAQ,EAAQ,EAAQ,EAEpC,YAAsB,CACpB,KAAM,GAAI,GACJ,EAAI,GACJ,EAAgB,IAKtB,EAAS,GAAIC,GAAiB,EAAK,YAAa,EAAK,eAAgB,GACrE,EAAO,SAAS,IAAI,EAAG,EAAG,GAE1B,EAAS,GAAIA,GAAiB,EAAK,YAAa,EAAK,eAAgB,GACrE,EAAO,SAAS,IAAI,EAAG,CAAC,EAAG,CAAC,GAE5B,EAAS,GAAIA,GAAiB,EAAK,YAAa,EAAK,eAAgB,GACrE,EAAO,SAAS,IAAI,EAAG,EAAG,GAE1B,EAAS,GAAIA,GAAiB,EAAK,YAAa,EAAK,eAAgB,GACrE,EAAO,SAAS,IAAI,CAAC,EAAG,EAAG,GAI7B,YAAmB,CACjB,sBAAsB,GAEtB,IACA,IAGA,EAAS,OAAO,EAAO,GACvB,EAAkB,SAIpB,YAAwB,CACtB,EAAS,EAAM,SAAS,WAAW,SAAS,MAE5C,KAAM,GAAO,KAAK,MAAQ,KAC1B,EAAK,OAAS,KAAK,IAAI,KAAK,IAAI,EAAO,IAAO,KAAM,GAGpD,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,GAAK,EACtC,EAAO,EAAI,GAAK,EAAQ,QAAQ,EAAO,GAAK,EAAK,OAAQ,EAAO,EAAI,GAAK,EAAK,OAAQ,EAAM,EAAM,EAAI,EAAM,GAAK,EAAK,MAExH,EAAM,SAAS,WAAW,SAAS,YAAc,GAInD,YAAyB,CACvB,KAAM,GAAO,KAAK,MAAQ,KACpB,EAAI,GACV,EAAO,SAAS,EAAI,KAAK,IAAI,EAAO,IAAO,EAC3C,EAAO,SAAS,EAAI,KAAK,IAAI,EAAO,IAAO,EAC3C,EAAO,SAAS,EAAI,KAAK,IAAI,EAAO,IAAO,EAC3C,EAAO,SAAS,EAAI,KAAK,IAAI,EAAO,IAAO,EAC3C,EAAO,SAAS,EAAI,KAAK,IAAI,EAAO,IAAO,EAC3C,EAAO,SAAS,EAAI,KAAK,IAAI,EAAO,IAAO,EAC3C,EAAO,SAAS,EAAI,KAAK,IAAI,EAAO,IAAO,EAC3C,EAAO,SAAS,EAAI,KAAK,IAAI,EAAO,IAAO,EAe7C,YAAsB,CAGpB,GAFA,EAAQ,OAAO,WACf,EAAS,OAAO,YACZ,GAAY,EAAQ,CACtB,EAAS,QAAQ,EAAO,GACxB,EAAO,OAAS,EAAQ,EACxB,EAAO,yBACP,KAAM,GAAQ,IACd,EAAS,EAAM,GACf,EAAU,EAAM,IAIpB,YAA2B,CACzB,KAAM,GAAM,GAAIR,GAAwB,EAAO,IAAK,EAAO,QACrD,EAAO,EAAI,IAAM,KAAK,GAAK,IAC3B,EAAS,EAAI,KAAK,IAAI,EAAO,GAAK,KAAK,IAAI,EAAK,SAEtD,MAAO,CADO,EAAS,EAAI,OACZ"}