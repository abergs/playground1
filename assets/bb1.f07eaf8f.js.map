{"version":3,"file":"bb1.f07eaf8f.js","sources":["../../bb1/texture.jpg","../../bb1/r2.png","../../bb1/b2.png","../../bb1/displace.js"],"sourcesContent":["export default \"__VITE_ASSET__fb0f5fdc__\"","export default \"__VITE_ASSET__dee41ee3__\"","export default \"__VITE_ASSET__0dc69ad7__\"","//import './style.css'\r\nimport * as THREE from 'three'\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\n//import '../shared/OrbitControls.js'\r\nimport * as dat from 'dat.gui'\r\n\r\nimport textureUrl from './texture.jpg'\r\nimport displacementUrl from './r2.png'\r\nimport alphaUrl from './b2.png'\r\n\r\nconst loader = new THREE.TextureLoader()\r\nconst texture = loader.load(textureUrl)\r\nconst displacement = loader.load(displacementUrl)\r\nconst alphaMap = loader.load(alphaUrl)\r\n\r\n// Debug\r\nconst gui = new dat.GUI()\r\n\r\n\r\nlet config = {\r\n    color: \"#00d1ff\",\r\n    light: {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0\r\n    },\r\n    reactToMouse: false\r\n}\r\n\r\ngui.add(config, \"reactToMouse\")\r\n\r\n\r\n\r\n\r\n// Canvas\r\nconst canvas = document.querySelector('canvas')\r\n\r\n// Scene\r\nconst scene = new THREE.Scene()\r\n\r\n// Objects\r\nconst geometry = new THREE.PlaneBufferGeometry(3,3,256,256 );\r\n\r\n// Materials\r\nconst material = new THREE.MeshStandardMaterial({\r\n    color: 'gray',\r\n    map: texture,\r\n    displacementMap: displacement,\r\n    displacementScale: .7,\r\n    alphaMap: alphaMap,    \r\n    transparent: true,\r\n    depthTest: false\r\n});\r\n\r\n\r\n\r\n// Mesh\r\nconst plane = new THREE.Mesh(geometry,material)\r\nplane.rotation.x = 181\r\nscene.add(plane)\r\ngui.add(plane.material, \"displacementScale\",0,5)\r\n\r\n\r\n// Lights\r\n\r\nconst pointLight = new THREE.PointLight(config.color, 2)\r\npointLight.position.x = 2\r\npointLight.position.y = 3\r\npointLight.position.z = 4\r\nscene.add(pointLight)\r\n\r\nconst f = gui.addFolder(\"Light\", true)\r\nf.add(pointLight.position,'x',-100,100);\r\nf.add(pointLight.position,'y',-100,100);\r\nf.add(pointLight.position,'z',-100,100);\r\nf.add(pointLight, 'intensity', 0, 10)\r\ngui.addColor(config,'color').onChange((c) =>{\r\n    pointLight.color.set(config.color)\r\n})\r\n\r\n/**\r\n * Sizes\r\n */\r\nconst sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n}\r\n\r\nwindow.addEventListener('resize', () =>\r\n{\r\n    // Update sizes\r\n    sizes.width = window.innerWidth\r\n    sizes.height = window.innerHeight\r\n\r\n    // Update camera\r\n    camera.aspect = sizes.width / sizes.height\r\n    camera.updateProjectionMatrix()\r\n\r\n    // Update renderer\r\n    renderer.setSize(sizes.width, sizes.height)\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n})\r\n\r\n/**\r\n * Camera\r\n */\r\n// Base camera\r\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\r\ncamera.position.x = 0\r\ncamera.position.y = 0\r\ncamera.position.z = 3\r\nscene.add(camera)\r\n\r\n// Controls\r\n// const controls = new OrbitControls(camera, canvas)\r\n// controls.enableDamping = true\r\n\r\n/**\r\n * Renderer\r\n */\r\nconst renderer = new THREE.WebGLRenderer({\r\n    canvas: canvas\r\n})\r\nrenderer.setSize(sizes.width, sizes.height)\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\r\nconst controls = new OrbitControls(camera, renderer.domElement)\r\ncontrols.enableDamping = true\r\ncontrols.autoRotate = true\r\n/**\r\n * Animate\r\n */\r\n\r\n\r\ndocument.addEventListener(\"mousemove\", mousemove);\r\nlet mouseY =0\r\n\r\nfunction mousemove(event) {\r\n    mouseY = event.clientY / sizes.height;\r\n}\r\n\r\nconst clock = new THREE.Clock()\r\n\r\nconst tick = () =>\r\n{\r\n\r\n    const elapsedTime = clock.getElapsedTime()\r\n\r\n    // Update objects\r\n    //plane.rotation.z = .5 * elapsedTime\r\n    //pointLight.position.x = 1 + 3 * mouseY\r\n    if(config.reactToMouse){\r\n    plane.material.displacementScale = .4 + .1 * (1-mouseY)\r\n}\r\n    // Update Orbital Controls\r\n     controls.update()\r\n\r\n    // Render\r\n    renderer.render(scene, camera)\r\n\r\n    // Call tick again on the next frame\r\n    window.requestAnimationFrame(tick)\r\n}\r\n\r\ntick()"],"names":["THREE.TextureLoader","dat.GUI","THREE.Scene","THREE.PlaneBufferGeometry","THREE.MeshStandardMaterial","THREE.Mesh","THREE.PointLight","THREE.PerspectiveCamera","THREE.WebGLRenderer","THREE.Clock"],"mappings":"uJAAA,MAAe,6CCAA,wCCAA,sCCUf,KAAM,GAAS,GAAIA,GACb,EAAU,EAAO,KAAK,GACtB,EAAe,EAAO,KAAK,GAC3B,EAAW,EAAO,KAAK,GAGvB,EAAM,GAAIC,GAGhB,GAAI,GAAS,CACT,MAAO,UACP,MAAO,CACH,EAAG,EACH,EAAG,EACH,EAAG,GAEP,aAAc,IAGlB,EAAI,IAAI,EAAQ,gBAMhB,KAAM,GAAS,SAAS,cAAc,UAGhC,EAAQ,GAAIC,GAGZ,EAAW,GAAIC,GAA0B,EAAE,EAAE,IAAI,KAGjD,EAAW,GAAIC,GAA2B,CAC5C,MAAO,OACP,IAAK,EACL,gBAAiB,EACjB,kBAAmB,GACnB,SAAU,EACV,YAAa,GACb,UAAW,KAMT,EAAQ,GAAIC,GAAW,EAAS,GACtC,EAAM,SAAS,EAAI,IACnB,EAAM,IAAI,GACV,EAAI,IAAI,EAAM,SAAU,oBAAoB,EAAE,GAK9C,KAAM,GAAa,GAAIC,GAAiB,EAAO,MAAO,GACtD,EAAW,SAAS,EAAI,EACxB,EAAW,SAAS,EAAI,EACxB,EAAW,SAAS,EAAI,EACxB,EAAM,IAAI,GAEV,KAAM,GAAI,EAAI,UAAU,QAAS,IACjC,EAAE,IAAI,EAAW,SAAS,IAAI,KAAK,KACnC,EAAE,IAAI,EAAW,SAAS,IAAI,KAAK,KACnC,EAAE,IAAI,EAAW,SAAS,IAAI,KAAK,KACnC,EAAE,IAAI,EAAY,YAAa,EAAG,IAClC,EAAI,SAAS,EAAO,SAAS,SAAS,AAAC,GAAK,CACxC,EAAW,MAAM,IAAI,EAAO,SAMhC,KAAM,GAAQ,CACV,MAAO,OAAO,WACd,OAAQ,OAAO,aAGnB,OAAO,iBAAiB,SAAU,IAClC,CAEI,EAAM,MAAQ,OAAO,WACrB,EAAM,OAAS,OAAO,YAGtB,EAAO,OAAS,EAAM,MAAQ,EAAM,OACpC,EAAO,yBAGP,EAAS,QAAQ,EAAM,MAAO,EAAM,QACpC,EAAS,cAAc,KAAK,IAAI,OAAO,iBAAkB,MAO7D,KAAM,GAAS,GAAIC,GAAwB,GAAI,EAAM,MAAQ,EAAM,OAAQ,GAAK,KAChF,EAAO,SAAS,EAAI,EACpB,EAAO,SAAS,EAAI,EACpB,EAAO,SAAS,EAAI,EACpB,EAAM,IAAI,GASV,KAAM,GAAW,GAAIC,GAAoB,CACrC,OAAQ,IAEZ,EAAS,QAAQ,EAAM,MAAO,EAAM,QACpC,EAAS,cAAc,KAAK,IAAI,OAAO,iBAAkB,IAEzD,KAAM,GAAW,GAAI,GAAc,EAAQ,EAAS,YACpD,EAAS,cAAgB,GACzB,EAAS,WAAa,GAMtB,SAAS,iBAAiB,YAAa,GACvC,GAAI,GAAQ,EAEZ,WAAmB,EAAO,CACtB,EAAS,EAAM,QAAU,EAAM,OAGnC,KAAM,GAAQ,GAAIC,GAEZ,EAAO,IACb,CAEwB,EAAM,iBAKvB,EAAO,cACV,GAAM,SAAS,kBAAoB,GAAK,GAAM,GAAE,IAG/C,EAAS,SAGV,EAAS,OAAO,EAAO,GAGvB,OAAO,sBAAsB,IAGjC"}