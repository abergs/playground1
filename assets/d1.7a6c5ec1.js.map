{"version":3,"file":"d1.7a6c5ec1.js","sources":["../../d1/BasicThreeDemo.js","../../d1/effects.js","../../d1/main.js"],"sourcesContent":["import * as THREE from \"three\";\r\n\r\n// import * as Stats from \"stats.js\";\r\n// var stats = new Stats();\r\n// document.body.appendChild( stats.dom );\r\n// stats.showPanel(0);\r\n\r\nexport class BasicThreeDemo {\r\n    constructor(container) {\r\n      this.container = container;\r\n      this.renderer = new THREE.WebGLRenderer({\r\n        antialias: true\r\n      });\r\n      this.renderer.setSize(container.offsetWidth, container.offsetHeight, false);\r\n      this.renderer.setPixelRatio(window.devicePixelRatio);\r\n  \r\n      container.append(this.renderer.domElement);\r\n  \r\n      this.camera = new THREE.PerspectiveCamera(\r\n        45,\r\n        container.offsetWidth / container.offsetHeight,\r\n        0.1,\r\n        10000\r\n      );\r\n      this.scene = new THREE.Scene();\r\n  \r\n      this.clock = new THREE.Clock();\r\n      this.assets = {};\r\n      this.disposed = false;\r\n      this.tick = this.tick.bind(this);\r\n      this.init = this.init.bind(this);\r\n    }\r\n    loadAssets() {\r\n      return new Promise((resolve, reject) => {\r\n        // const manager = new THREE.LoadingManager(resolve);\r\n        // this.text.load(manager);\r\n      });\r\n    }\r\n    init() {\r\n      this.tick();\r\n    }\r\n    getViewSizeAtDepth(depth = 0) {\r\n      const fovInRadians = (this.camera.fov * Math.PI) / 180;\r\n      const height = Math.abs(\r\n        (this.camera.position.z - depth) * Math.tan(fovInRadians / 2) * 2\r\n      );\r\n      return { width: height * this.camera.aspect, height };\r\n    }\r\n    dispose() {\r\n      this.disposed = true;\r\n    }\r\n    onResize() {}\r\n    update() {}\r\n    render() {\r\n      this.renderer.render(this.scene, this.camera);\r\n    }\r\n    tick() {\r\n      if (this.disposed) return;\r\n      //stats.begin()\r\n      if (resizeRendererToDisplaySize(this.renderer)) {\r\n        const canvas = this.renderer.domElement;\r\n        this.camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n        this.camera.updateProjectionMatrix();\r\n        this.onResize();\r\n      }\r\n      const delta = this.clock.getDelta();\r\n      this.render(delta);\r\n      this.update(delta);\r\n      //stats.end()\r\n      requestAnimationFrame(this.tick);\r\n    }\r\n  }\r\n  \r\n  function resizeRendererToDisplaySize(renderer) {\r\n    const canvas = renderer.domElement;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n    const needResize = canvas.width !== width || canvas.height !== height;\r\n    if (needResize) {\r\n      renderer.setSize(width, height, false);\r\n    }\r\n    return needResize;\r\n  }","import * as THREE from \"three\";\r\n\r\n\r\nconst distortion_uniforms = {\r\n    uDistortionX: new THREE.Uniform(new THREE.Vector2(80, 3)),\r\n    uDistortionY: new THREE.Uniform(new THREE.Vector2(-40, 2.5))\r\n  };\r\n  \r\n  const distortion_vertex = `\r\n  #define PI 3.14159265358979\r\n    uniform vec2 uDistortionX;\r\n    uniform vec2 uDistortionY;\r\n  \r\n      float nsin(float val){\r\n      return sin(val) * 0.5+0.5;\r\n      }\r\n    vec3 getDistortion(float progress){\r\n          progress = clamp(progress, 0.,1.);\r\n          float xAmp = uDistortionX.r;\r\n          float xFreq = uDistortionX.g;\r\n          float yAmp = uDistortionY.r;\r\n          float yFreq = uDistortionY.g;\r\n          return vec3( \r\n              xAmp * nsin(progress* PI * xFreq   - PI / 2.) ,\r\n              yAmp * nsin(progress * PI *yFreq - PI / 2.  ) ,\r\n              0.\r\n          );\r\n      }\r\n  `;\r\n  \r\n  export const distortion1 = {\r\n    uniforms: distortion_uniforms,\r\n    vshader: distortion_vertex\r\n  };","import \"./style.css\";\r\n\r\n//import './style.css'\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n//import '../shared/OrbitControls.js'\r\nimport * as dat from \"dat.gui\";\r\n\r\nimport textureUrl from \"./texture.jpg\";\r\nimport displacementUrl from \"./r2.png\";\r\nimport alphaUrl from \"./b2.png\";\r\n\r\nimport { BasicThreeDemo } from \"./BasicThreeDemo\";\r\nimport { CarLights } from \"./CarLights\";\r\nimport { Road } from \"./Road\";\r\nimport { distortion1 as distortion } from \"./effects\";\r\nimport gsap from \"gsap\";\r\nimport { Mesh } from \"three\";\r\n\r\n\r\nclass Spiral {\r\n  constructor(app, options) {\r\n    this.app = app;\r\n    this.options = options;\r\n  }\r\n  init() {\r\n    // var scene = new THREE.Scene();\r\n    // var camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);\r\n    // camera.position.set(0, 30, 30);\r\n\r\n    let scene = this.app.scene;\r\n    scene.add(new THREE.GridHelper(20, 10));\r\n\r\n    var radius = 10;\r\n    var turns = 10;\r\n    var objPerTurn = 30;\r\n\r\n    var angleStep = (Math.PI * 2) / objPerTurn;\r\n    var heightStep = 0.5;\r\n\r\n    var geom = new THREE.BoxBufferGeometry(2, 3, 1);\r\n\r\n    const light = new THREE.PointLight( 0xffffff,1,200 );\r\n    light.position.set(0,0,-20);\r\n    this.app.camera.add( light );\r\n\r\n    let bulb = new Mesh(\r\n      new THREE.SphereBufferGeometry( .2, 32,32 ),\r\n      new THREE.MeshBasicMaterial( { color: 0xffffff } )\r\n    );\r\n    light.add(bulb);\r\n\r\n    scene.add(new THREE.PointLightHelper(light));\r\n\r\n    scene.add(new THREE.AmbientLight(0xffffff, 0.2));\r\n    // scene.add(new THREE.PointLight(0xffffff, 0.5));\r\n\r\n\r\n    this.group = new THREE.Group();\r\n\r\n    for (let i = 0; i < turns * objPerTurn; i++) {\r\n      let plane = new THREE.Mesh(\r\n        geom,\r\n        new THREE.MeshLambertMaterial({\r\n          color: this.options.color,\r\n        })\r\n      );\r\n\r\n      // position\r\n      plane.position.set(Math.cos(angleStep * i) * radius, heightStep * i, Math.sin(angleStep * i) * radius);\r\n\r\n      // rotation\r\n      this.group.add(plane);\r\n      plane.rotation.y = -angleStep * i;\r\n      // scene.add(plane);\r\n    }\r\n\r\n    scene.add(this.group);\r\n\r\n\r\n  }\r\n\r\n  update(time) {\r\n    // this.group.rotation.y += 0.01;\r\n    // this.group.rotateX(10);\r\n    this.group.children.forEach(function(child){\r\n      // child.rotation.y += .01;\r\n      // console.log(child);\r\n    });\r\n  }\r\n}\r\n\r\nexport class App extends BasicThreeDemo {\r\n  constructor(inoptions) {\r\n    const options = {\r\n      container: document.getElementById(\"container\"),\r\n      length: 400,\r\n      width: 20,\r\n      roadWidth: 9,\r\n      islandWidth: 2,\r\n      nPairs: 100,\r\n      roadSections: 3,\r\n      color: \"#0051c0\",\r\n      distortion,\r\n      ...inoptions,\r\n    };\r\n    super(options.container);\r\n    this.options = options;\r\n\r\n    this.camera.position  .z = 0;\r\n    this.camera.position.y = 200;\r\n    // this.camera.position.x = 0;\r\n    this.camera.rotateX(-Math.PI/2);\r\n\r\n    // animate camera\r\n    gsap.to(this.camera.position, {y:50, duration:30, ease: \"power1.inOut\", yoyo: true, repeat: -1});\r\n\r\n    this.scene.add(this.camera);\r\n    const helper = new THREE.CameraHelper( this.camera );\r\n    this.scene.add( helper );\r\n\r\n    const gui = new dat.GUI();\r\n\r\n\r\n    gui.add(this.camera.position, \"x\");\r\n    gui.add(this.camera.position, \"y\");\r\n    gui.add(this.camera.position, \"z\");\r\n\r\n    gui.addFolder(\"Rotation\")\r\n    gui.add(this.camera.rotation, \"x\");\r\n    gui.add(this.camera.rotation, \"y\");\r\n    gui.add(this.camera.rotation, \"z\");\r\n\r\n    gui.addColor(this.options, \"color\").onChange((v)=>{\r\n      this.spiral.group.children.forEach((child)=>{child.material.color = new THREE.Color(v)});\r\n    })\r\n\r\n\r\n\r\n\r\n    let colors1 = [\"#ff0000\", \"#00ff00\", \"#0000ff\"];\r\n    let colors2 = [\"#ff0000\", \"#00ff00\", \"#0000ff\"];\r\n\r\n    colors1 = [\"#fbc50b\", \"#de5d00\", \"#f9f5d6\"];\r\n    colors2 = [\"#eb6333\", \"#b1d5de\", \"#182c37\"];\r\n\r\n    colors1 = [\"#0CECDD\", \"#FFF338\", \"#FF67E7\", \"#C400FF\"];\r\n    colors2 = [\"#0E185F\", \"#2FA4FF\", \"#00FFDD\", \"#E8FFC2\"];\r\n\r\n    // this.road = new Road(this, options);\r\n    // this.leftLights = new CarLights(this, {...options, colors:colors1, color: 0x00ff2a, speed: 30});\r\n    // this.rightLights = new CarLights(this, {...options, colors:colors2, color: 0xff2a2a, speed: -30.0});\r\n    this.spiral= new Spiral(this, options);\r\n    const c = new THREE.Color(\"black\");\r\n  \r\n\r\n    // this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n    // this.controls.addEventListener(\"change\", () => {\r\n    //   console.log(\"Controls\", this.controls);\r\n    //   console.log(\"Camera\", this.camera);\r\n    //   console.log(\"Pos\", this.camera.position);\r\n    //   console.log(\"Rotation\", this.camera.rotation);\r\n\r\n\r\n    //   console.log(\"---\");\r\n    //   console.log(\"controls\", this.controls.position0, this.controls.target0, this.controls.zoomO)\r\n    // });\r\n    // this.controls.update();\r\n\r\n    // setTimeout(() => {\r\n    //   this.camera.position.set(0,120,150);\r\n    //   this.camera.rotateX(-Math.PI / 2);\r\n    //   // this.controls.update();\r\n    // }, 500);\r\n    console.log(this.camera);\r\n    console.log(this.camera.position);\r\n    console.log(this.camera.rotation);\r\n\r\n    this.scene.background = c;\r\n  }\r\n\r\n  init() {\r\n    this.spiral.init();\r\n\r\n    //this.road.init();\r\n    //this.leftLights.init();\r\n    //this.leftLights.mesh.position.setX(this.options.roadWidth/2 + this.options.islandWidth /2);\r\n\r\n    //this.rightLights.init();\r\n    //this.rightLights.mesh.position.setX(-this.options.roadWidth/2 - this.options.islandWidth /2);\r\n\r\n    this.tick();\r\n  }\r\n\r\n  update(delta) {\r\n    let time = this.clock.elapsedTime;\r\n    // this.scene.rotation.y += 0.01;\r\n    this.spiral.update(delta);\r\n    // this.controls.update();\r\n    // this.road.update(time);\r\n    // this.leftLights.update(time);\r\n    // this.rightLights.update(time);\r\n    \r\n  }\r\n}\r\n\r\nconst a = new App();\r\na.init();\r\n"],"names":["THREE.WebGLRenderer","THREE.PerspectiveCamera","THREE.Scene","THREE.Clock","THREE.Uniform","THREE.Vector2","THREE.GridHelper","THREE.BoxBufferGeometry","THREE.PointLight","THREE.SphereBufferGeometry","THREE.MeshBasicMaterial","THREE.PointLightHelper","THREE.AmbientLight","THREE.Group","THREE.Mesh","THREE.MeshLambertMaterial","distortion","gsap","THREE.CameraHelper","dat.GUI","THREE.Color"],"mappings":"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"}